Falling Path
1.1 - In the problem we look at the path we have taken and the different ways 
we can get to where we are. Then we considere all the options in front of us
. We take all possible steps and repeat.

1.2 - I will have an array of the same size as my input where I store the
minimum sum that it takes to get to the current index so that every next step 
I only consider the minimum solution. This way we don't overlap work.

1.3 - Ideal:
I - We want to find shortest path without repeating work
D - We want the sum of minumum path using dynamic programing.
E - Solution can be recursive, I thought of an array of visited indexes, but 
tried to think as a computer and I found out that keeping track of shortest
path to any point might prove a better solution.
A - I think I want to do the soltion recursively, but that might be inefficient
L - look n learn



1.3 Duke's 7 steps:

#1 I worked on another instance where the answer was not clear to me:
[[1 3 9]
 [2 1 1]
 [3 1 1]]
I came up with the solution very quickly but did not understand why
I went back to the problem description and it made things clearer.

#2 I wrote down what I did "as a human" and realized that I was keeping
track on the cost that it takes to arrive to a place.

# I found that we can keep track of the cost to move a step within the +-1 range 
on another array of the same size. We pick the smallest cost and put it in the correct
index, then we move and do the same in the next row.

#4 I tested my steps

#5 I wrote the code

#6 Ran it with the test case I did by hand.

#7 My code did not work because I was adding the last step + 0 
instead of the current step (checking the wrong matrix) so I fixed it.


